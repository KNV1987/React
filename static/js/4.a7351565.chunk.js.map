{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItems.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogsItems","path","id","className","c","dialog","active","activeClassName","name","Message","message","maxLength100","maxLengthCreater","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","btnPost","Dialogs","dialogsPage","dialogs","map","d","key","messages","m","newMessageBody","dialogsItem","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"6MAIIA,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAERE,EAAmB,SAACC,GAAe,IACxCC,EADuC,uKAGzC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAG,eAHH,GACbC,IAAML,WAUtC,OAHqCM,YAAQX,EAARW,CACnCL,K,oBCfJM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,+JCanMC,EAVM,SAACN,GAEpB,IAAIO,EAAO,YAAcP,EAAMQ,GAC/B,OACE,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACjC,kBAAC,IAAD,CAASX,GAAIM,EAAMM,gBAAiBH,IAAEE,QAASZ,EAAMc,QCE5CC,EAJC,SAACf,GACf,OAAO,yBAAKS,UAAWC,IAAEM,SAAUhB,EAAMgB,UCgCrCC,EAAeC,YAAiB,KAUhCC,EAAsBC,YAAU,CACpCC,KAAM,wBADoBD,EATL,SAACpB,GACtB,OAAO,0BAAMsB,SAAUtB,EAAMuB,cAC3B,6BACE,kBAACC,EAAA,EAAD,CAAQC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAeY,YAAY,cAAcf,KAAK,oBAElG,yBAAKL,UAAWC,IAAEoB,SAAS,sDAQhBC,EA5CC,SAAC/B,GACf,IAAIP,EAAQO,EAAMgC,YAEdrB,EAASlB,EAAMwC,QAAQC,KAAK,SAAAC,GAAC,OAAK,kBAAC,EAAD,CAAcrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QAC/EQ,EAAUvB,EAAM4C,SAASH,KAAK,SAAAI,GAAC,OAAK,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASoB,IAAKE,EAAE9B,QACvDf,EAAM8C,eAQ3B,OAAIvC,EAAMN,OAGR,yBAAKe,UAAWC,IAAEuB,SAChB,yBAAKxB,UAAWC,IAAE8B,aACd7B,GAEJ,yBAAKF,UAAWC,IAAE2B,UAChB,6BAAOrB,GACP,6BACE,kBAACG,EAAD,CAAqBG,SAdV,SAACmB,GAClBzC,EAAM0C,YAAYD,EAAOF,sBAGF,kBAAC,IAAD,CAAUtC,GAAG,YCGzB0C,sBACbxC,aAlBoB,SAACV,GACrB,MAAO,CACLuC,YAAavC,EAAMuC,gBAIC,SAACY,GACvB,MAAO,CACLF,YAAa,SAACH,GACZK,EAAUC,YAAmBN,SAUjC3C,IAFa+C,CAGbZ","file":"static/js/4.a7351565.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1pNWd\",\"dialogsItem\":\"Dialogs_dialogsItem__3BhGN\",\"dialog\":\"Dialogs_dialog__1YEJI\",\"messages\":\"Dialogs_messages__1aFoa\",\"message\":\"Dialogs_message__3hllP\",\"active\":\"Dialogs_active__30Lta\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport c from \"../Dialogs.module.css\";\r\n\r\nconst DialogsItems = (props) => {\r\n \r\n  let path = '/message/' + props.id;\r\n  return(\r\n    <div className={c.dialog + \" \" + c.active}>\r\n      <NavLink to={path} activeClassName={c.active}>{props.name}</NavLink> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogsItems;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport c from \"../Dialogs.module.css\";\r\n\r\n\r\n\r\n\r\nconst Message = (props) =>{\r\n  return <div className={c.message}>{props.message}</div>\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../Common/FormsControls/FormsControls\";\r\nimport { maxLengthCreater, required } from \"../utils/validators\";\r\nimport c from \"./Dialogs.module.css\";\r\nimport DialogsItems from \"./DialogsItem/DialogsItems\";\r\nimport Message from \"./Message/Message\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage; \r\n\r\n  let dialog = state.dialogs.map( d => (<DialogsItems name={d.name} key={d.id} id={d.id} />));\r\n  let message = state.messages.map( m => (<Message message={m.message} key={m.id} />));\r\n  let newMessageBody = state.newMessageBody;\r\n  \r\n \r\n \r\n  let addNewMessage =(values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  }\r\n\r\n  if(!props.isAuth) return <Redirect to='/login'/>\r\n  return (\r\n    \r\n    <div className={c.dialogs}>\r\n      <div className={c.dialogsItem}>\r\n        { dialog }\r\n      </div>\r\n      <div className={c.messages}>\r\n        <div>{ message }</div>\r\n        <div>\r\n          <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>      \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength100 = maxLengthCreater(100)\r\nconst AddMessageForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      <Field  component={Textarea} validate={[required, maxLength100]} placeholder='Add message' name='newMessageBody' />\r\n    </div>\r\n    <div className={c.btnPost}><button > Add Message </button></div>\r\n\r\n  </form>\r\n}\r\nconst AddMessageFormRedux = reduxForm({\r\n  form: 'dialogAddMessageForm'\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { sendMessageCreator} from \"../../redax/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nlet myDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch( sendMessageCreator(newMessageBody));\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, myDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}